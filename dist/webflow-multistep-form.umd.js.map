{"version":3,"file":"webflow-multistep-form.umd.js","sources":["../src/core/stepManager.js","../src/core/formMemory.js","../src/core/QueryParams.js","../src/core/validator.js","../src/core/WebflowMultiStepForm.js","../src/core/index.js"],"sourcesContent":["// src/core/StepManager.js\nclass StepManager {\n  constructor(form) {\n    this.form = form;\n    this.steps = Array.from(this.form.querySelectorAll(\"[data-form-step]\"));\n    this.currentStepIndex = 0;\n    this.totalSteps = this.steps.length;\n  }\n\n  getCurrentStep() {\n    return this.steps[this.currentStepIndex];\n  }\n\n  getCurrentStepIndex() {\n    return this.currentStepIndex;\n  }\n\n  getTotalSteps() {\n    return this.totalSteps;\n  }\n\n  goToStep(index) {\n    if (index >= 0 && index < this.totalSteps) {\n      this.currentStepIndex = index;\n      this.updateStepStates();\n      return true;\n    }\n    return false;\n  }\n\n  next() {\n    return this.goToStep(this.currentStepIndex + 1);\n  }\n\n  previous() {\n    return this.goToStep(this.currentStepIndex - 1);\n  }\n\n  hasNext() {\n    return this.currentStepIndex < this.totalSteps - 1;\n  }\n\n  hasPrevious() {\n    return this.currentStepIndex > 0;\n  }\n\n  updateStepStates() {\n    this.steps.forEach((step, index) => {\n      step.removeAttribute(\"data-form-step-active\");\n      step.removeAttribute(\"data-form-step-completed\");\n      step.removeAttribute(\"data-form-step-upcoming\");\n\n      if (index === this.currentStepIndex) {\n        step.setAttribute(\"data-form-step-active\", \"\");\n        step.style.display = \"block\";\n      } else if (index < this.currentStepIndex) {\n        step.setAttribute(\"data-form-step-completed\", \"\");\n        step.style.display = \"none\";\n      } else {\n        step.setAttribute(\"data-form-step-upcoming\", \"\");\n        step.style.display = \"none\";\n      }\n    });\n\n    this.form.setAttribute(\"data-form-step-index\", this.currentStepIndex);\n    this.form.setAttribute(\"data-form-step-count\", this.totalSteps);\n\n    this.form.dispatchEvent(\n      new CustomEvent(\"stepChange\", {\n        detail: {\n          currentStep: this.currentStepIndex,\n          totalSteps: this.totalSteps,\n          isFirstStep: !this.hasPrevious(),\n          isLastStep: !this.hasNext(),\n        },\n      })\n    );\n  }\n}\n\nexport default StepManager;\n","// src/core/FormMemory.js\nclass FormMemory {\n  constructor(form) {\n    this.form = form;\n    this.formId = this.form.id;\n    this.storageKey = `wf-form-${this.formId}`;\n    this.autoSaveInterval = null;\n\n    this.handleInput = this.handleInput.bind(this);\n    this.saveProgress = this.saveProgress.bind(this);\n    this.restoreProgress = this.restoreProgress.bind(this);\n  }\n\n  init() {\n    this.form.addEventListener(\"input\", this.handleInput);\n    this.restoreProgress();\n    this.autoSaveInterval = setInterval(this.saveProgress, 30000);\n    window.addEventListener(\"beforeunload\", () => {\n      this.saveProgress();\n    });\n  }\n\n  handleInput(event) {\n    if (event.target.type === \"password\") return;\n\n    if (this.saveTimeout) clearTimeout(this.saveTimeout);\n    this.saveTimeout = setTimeout(() => this.saveProgress(), 1000);\n  }\n\n  saveProgress() {\n    const formData = {};\n    const fields = this.form.querySelectorAll(\"input, select, textarea\");\n\n    fields.forEach((field) => {\n      if (field.type === \"submit\" || field.type === \"password\") return;\n\n      switch (field.type) {\n        case \"checkbox\":\n        case \"radio\":\n          if (field.checked) {\n            formData[field.name] = field.value;\n          }\n          break;\n        case \"file\":\n          break;\n        default:\n          if (field.value) {\n            formData[field.name] = field.value;\n          }\n      }\n    });\n\n    try {\n      localStorage.setItem(\n        this.storageKey,\n        JSON.stringify({\n          timestamp: Date.now(),\n          data: formData,\n          currentStep: this.form.getAttribute(\"data-form-step-index\") || 0,\n        })\n      );\n\n      this.form.dispatchEvent(new CustomEvent(\"formProgressSaved\"));\n    } catch (error) {\n      console.warn(\"Failed to save form progress:\", error);\n    }\n  }\n\n  restoreProgress() {\n    try {\n      const saved = localStorage.getItem(this.storageKey);\n      if (!saved) return false;\n\n      const { data, timestamp, currentStep } = JSON.parse(saved);\n\n      const MAX_AGE = 24 * 60 * 60 * 1000;\n      if (Date.now() - timestamp > MAX_AGE) {\n        this.clearSavedProgress();\n        return false;\n      }\n\n      Object.entries(data).forEach(([name, value]) => {\n        const fields = this.form.querySelectorAll(`[name=\"${name}\"]`);\n        fields.forEach((field) => {\n          switch (field.type) {\n            case \"checkbox\":\n            case \"radio\":\n              field.checked = field.value === value;\n              break;\n            default:\n              field.value = value;\n          }\n        });\n      });\n\n      if (currentStep) {\n        this.form.dispatchEvent(\n          new CustomEvent(\"restoreStep\", {\n            detail: { step: parseInt(currentStep, 10) },\n          })\n        );\n      }\n\n      this.form.dispatchEvent(\n        new CustomEvent(\"formProgressRestored\", {\n          detail: { timestamp },\n        })\n      );\n\n      return true;\n    } catch (error) {\n      console.warn(\"Failed to restore form progress:\", error);\n      return false;\n    }\n  }\n\n  clearSavedProgress() {\n    try {\n      localStorage.removeItem(this.storageKey);\n      return true;\n    } catch (error) {\n      console.warn(\"Failed to clear form progress:\", error);\n      return false;\n    }\n  }\n\n  destroy() {\n    if (this.autoSaveInterval) {\n      clearInterval(this.autoSaveInterval);\n    }\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n    this.form.removeEventListener(\"input\", this.handleInput);\n  }\n}\n\nexport default FormMemory;\n","// src/core/QueryParams.js\nclass QueryParams {\n  constructor(form) {\n    this.form = form;\n  }\n\n  init() {\n    // Check for data-form-prefill attribute\n    if (this.form.hasAttribute(\"data-form-prefill\")) {\n      this.prefillFromQueryParams();\n    }\n\n    // Check for specific step in URL\n    const stepParam = this.getQueryParam(\"step\");\n    if (stepParam) {\n      this.form.dispatchEvent(\n        new CustomEvent(\"goToStep\", {\n          detail: { step: parseInt(stepParam, 10) - 1 },\n        })\n      );\n    }\n  }\n\n  getQueryParam(param) {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(param);\n  }\n\n  prefillFromQueryParams() {\n    const fields = this.form.querySelectorAll(\"[data-param]\");\n\n    fields.forEach((field) => {\n      const paramName = field.getAttribute(\"data-param\");\n      const paramValue = this.getQueryParam(paramName);\n\n      if (paramValue) {\n        switch (field.type) {\n          case \"checkbox\":\n            field.checked = paramValue.toLowerCase() === \"true\";\n            break;\n          case \"radio\":\n            if (field.value === paramValue) {\n              field.checked = true;\n            }\n            break;\n          default:\n            field.value = paramValue;\n        }\n\n        // Dispatch change event to trigger any dependent logic\n        field.dispatchEvent(new Event(\"change\", { bubbles: true }));\n      }\n    });\n  }\n}\n\nexport default QueryParams;\n","// src/core/Validator.js\nclass Validator {\n  constructor(form) {\n    this.form = form;\n    this.validationRules = new Map();\n    this.customValidators = new Map();\n\n    // Setup default validators\n    this.setupDefaultValidators();\n  }\n\n  setupDefaultValidators() {\n    this.customValidators.set(\"required\", (value) => ({\n      valid: value.trim().length > 0,\n      message: \"This field is required\",\n    }));\n\n    this.customValidators.set(\"email\", (value) => ({\n      valid: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value),\n      message: \"Please enter a valid email address\",\n    }));\n\n    this.customValidators.set(\"phone\", (value) => ({\n      valid: /^[\\d\\s\\-+()]{7,}$/.test(value),\n      message: \"Please enter a valid phone number\",\n    }));\n\n    this.customValidators.set(\"minLength\", (value, length) => ({\n      valid: value.length >= length,\n      message: `Must be at least ${length} characters`,\n    }));\n\n    this.customValidators.set(\"maxLength\", (value, length) => ({\n      valid: value.length <= length,\n      message: `Must be no more than ${length} characters`,\n    }));\n\n    this.customValidators.set(\"pattern\", (value, pattern) => ({\n      valid: new RegExp(pattern).test(value),\n      message: \"Please match the requested format\",\n    }));\n  }\n\n  init() {\n    // Set up validation from data attributes\n    this.setupFieldValidations();\n\n    // Add real-time validation listeners\n    this.setupValidationListeners();\n  }\n\n  setupFieldValidations() {\n    const fields = this.form.querySelectorAll(\"[data-validate]\");\n\n    fields.forEach((field) => {\n      const rules = field.getAttribute(\"data-validate\").split(\" \");\n      this.validationRules.set(field, rules);\n    });\n  }\n\n  setupValidationListeners() {\n    this.form.querySelectorAll(\"input, select, textarea\").forEach((field) => {\n      if (this.validationRules.has(field)) {\n        field.addEventListener(\"blur\", () => this.validateField(field));\n        field.addEventListener(\"input\", () => {\n          // Remove error states while typing\n          this.clearError(field);\n        });\n      }\n    });\n  }\n\n  validateField(field) {\n    const rules = this.validationRules.get(field);\n    if (!rules) return true;\n\n    let isValid = true;\n    let errorMessage = \"\";\n\n    for (const ruleString of rules) {\n      let ruleName, ruleValue;\n\n      // Check if rule has a value (e.g., minLength:3)\n      if (ruleString.includes(\":\")) {\n        [ruleName, ruleValue] = ruleString.split(\":\");\n      } else {\n        ruleName = ruleString;\n      }\n\n      const validator = this.customValidators.get(ruleName);\n      if (validator) {\n        const result = validator(field.value, ruleValue);\n        if (!result.valid) {\n          isValid = false;\n          errorMessage =\n            field.getAttribute(\"data-error-message\") || result.message;\n          break;\n        }\n      }\n    }\n\n    if (!isValid) {\n      this.showError(field, errorMessage);\n    } else {\n      this.clearError(field);\n    }\n\n    return isValid;\n  }\n\n  validateStep(stepElement) {\n    const fields = stepElement.querySelectorAll(\"input, select, textarea\");\n    let isStepValid = true;\n\n    fields.forEach((field) => {\n      if (this.validationRules.has(field)) {\n        if (!this.validateField(field)) {\n          isStepValid = false;\n        }\n      }\n    });\n\n    return isStepValid;\n  }\n\n  validateAllSteps() {\n    const steps = this.form.querySelectorAll(\"[data-form-step]\");\n    let isValid = true;\n\n    steps.forEach((step) => {\n      if (!this.validateStep(step)) {\n        isValid = false;\n      }\n    });\n\n    return isValid;\n  }\n\n  showError(field, message) {\n    // Add error state to field\n    field.setAttribute(\"data-invalid\", \"\");\n\n    // Create or update error message\n    let errorElement = field.parentElement.querySelector(\".form-error-message\");\n    if (!errorElement) {\n      errorElement = document.createElement(\"div\");\n      errorElement.className = \"form-error-message\";\n      field.parentElement.appendChild(errorElement);\n    }\n    errorElement.textContent = message;\n  }\n\n  clearError(field) {\n    field.removeAttribute(\"data-invalid\");\n    const errorElement = field.parentElement.querySelector(\n      \".form-error-message\"\n    );\n    if (errorElement) {\n      errorElement.remove();\n    }\n  }\n\n  clearAllErrors() {\n    this.form.querySelectorAll(\"[data-invalid]\").forEach((field) => {\n      this.clearError(field);\n    });\n  }\n\n  // Add custom validator\n  addValidator(name, validatorFn) {\n    this.customValidators.set(name, validatorFn);\n  }\n}\n\nexport default Validator;\n","// src/core/WebflowMultiStepForm.js\nimport StepManager from \"./StepManager.js\";\nimport FormMemory from \"./FormMemory.js\";\nimport QueryParams from \"./QueryParams.js\";\nimport Validator from \"./Validator.js\";\n\nclass WebflowMultiStepForm {\n  constructor(formElement) {\n    if (!(formElement instanceof Element)) {\n      throw new Error(\"A form element must be passed to the constructor\");\n    }\n\n    this.form = formElement;\n\n    // Initialize core modules\n    this.stepManager = new StepManager(this.form);\n    this.formMemory = new FormMemory(this.form);\n    this.queryParams = new QueryParams(this.form);\n    this.validator = new Validator(this.form);\n\n    // Initialize properties scoped to this specific form instance\n    this.steps = Array.from(this.form.querySelectorAll(\"[data-form-step]\"));\n    this.nextButtons = Array.from(\n      this.form.querySelectorAll('[data-form-navigation=\"next\"]')\n    );\n    this.prevButtons = Array.from(\n      this.form.querySelectorAll('[data-form-navigation=\"prev\"]')\n    );\n    this.currentStepIndex = 0;\n\n    this.init();\n  }\n\n  init() {\n    // Initialize validator\n    this.validator.init();\n\n    // Initialize form memory if not disabled\n    if (this.form.getAttribute(\"data-form-memory\") !== \"false\") {\n      this.formMemory.init();\n    }\n\n    // Initialize query parameters\n    this.queryParams.init();\n\n    // Set initial step states\n    this.updateStepStates();\n\n    // Add event listeners to navigation buttons\n    this.nextButtons.forEach((button) => {\n      button.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        this.nextStep();\n      });\n    });\n\n    this.prevButtons.forEach((button) => {\n      button.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        this.previousStep();\n      });\n    });\n\n    // Update navigation state\n    this.updateNavigationState();\n\n    // Prevent form submission until last step and validation passes\n    this.form.addEventListener(\"submit\", (e) => this.handleSubmit(e));\n\n    // Listen for events\n    this.setupEventListeners();\n\n    // Add keyboard navigation\n    this.setupKeyboardNavigation();\n  }\n\n  setupEventListeners() {\n    // Listen for step changes to update navigation\n    this.form.addEventListener(\"stepChange\", () =>\n      this.updateNavigationState()\n    );\n\n    // Listen for form memory restore events\n    this.form.addEventListener(\"restoreStep\", (e) => {\n      this.goToStep(e.detail.step);\n    });\n\n    // Listen for goToStep events from query params\n    this.form.addEventListener(\"goToStep\", (e) => {\n      this.goToStep(e.detail.step);\n    });\n\n    // Listen for form progress events\n    if (this.form.getAttribute(\"data-form-memory\") !== \"false\") {\n      this.form.addEventListener(\"formProgressSaved\", () => {\n        this.showSavedFeedback();\n      });\n    }\n  }\n\n  setupKeyboardNavigation() {\n    this.form.addEventListener(\"keydown\", (e) => {\n      // Only handle keyboard navigation if enabled\n      if (this.form.getAttribute(\"data-keyboard-nav\") !== \"true\") return;\n\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        this.nextStep();\n      } else if (e.key === \"Enter\" && e.shiftKey) {\n        e.preventDefault();\n        this.previousStep();\n      }\n    });\n  }\n\n  updateStepStates() {\n    this.steps.forEach((step, index) => {\n      // Remove all possible states first\n      step.removeAttribute(\"data-form-step-active\");\n      step.removeAttribute(\"data-form-step-completed\");\n      step.removeAttribute(\"data-form-step-upcoming\");\n\n      // Set appropriate state\n      if (index === this.currentStepIndex) {\n        step.setAttribute(\"data-form-step-active\", \"\");\n        step.style.display = \"block\";\n        // Focus first field in step\n        const firstInput = step.querySelector(\"input, select, textarea\");\n        if (firstInput) firstInput.focus();\n      } else if (index < this.currentStepIndex) {\n        step.setAttribute(\"data-form-step-completed\", \"\");\n        step.style.display = \"none\";\n      } else {\n        step.setAttribute(\"data-form-step-upcoming\", \"\");\n        step.style.display = \"none\";\n      }\n    });\n\n    // Update form state\n    this.form.setAttribute(\"data-form-step-index\", this.currentStepIndex);\n    this.form.setAttribute(\"data-form-step-count\", this.steps.length);\n\n    // Scroll to top of form\n    if (this.form.getAttribute(\"data-auto-scroll\") !== \"false\") {\n      this.form.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n    }\n  }\n\n  updateNavigationState() {\n    // Update previous buttons\n    this.prevButtons.forEach((button) => {\n      button.removeAttribute(\"data-navigation-disabled\");\n      button.removeAttribute(\"data-navigation-hidden\");\n\n      if (this.currentStepIndex === 0) {\n        button.setAttribute(\"data-navigation-disabled\", \"\");\n        button.disabled = true;\n      } else {\n        button.removeAttribute(\"data-navigation-disabled\");\n        button.disabled = false;\n      }\n    });\n\n    // Update next buttons\n    this.nextButtons.forEach((button) => {\n      button.removeAttribute(\"data-navigation-disabled\");\n      button.removeAttribute(\"data-navigation-hidden\");\n      button.removeAttribute(\"data-navigation-final\");\n\n      if (this.currentStepIndex === this.steps.length - 1) {\n        button.setAttribute(\"data-navigation-disabled\", \"\");\n        button.disabled = true;\n      } else if (this.currentStepIndex === this.steps.length - 2) {\n        button.setAttribute(\"data-navigation-final\", \"\");\n        button.disabled = false;\n      } else {\n        button.removeAttribute(\"data-navigation-disabled\");\n        button.disabled = false;\n      }\n    });\n  }\n\n  nextStep() {\n    const currentStep = this.steps[this.currentStepIndex];\n\n    // Validate current step before proceeding\n    if (this.validator.validateStep(currentStep)) {\n      if (this.currentStepIndex < this.steps.length - 1) {\n        this.currentStepIndex++;\n        this.updateStepStates();\n        this.updateNavigationState();\n\n        // Save progress if enabled\n        if (this.form.getAttribute(\"data-form-memory\") !== \"false\") {\n          this.formMemory.saveProgress();\n        }\n\n        // Dispatch step complete event\n        this.form.dispatchEvent(\n          new CustomEvent(\"stepComplete\", {\n            detail: { step: this.currentStepIndex - 1 },\n          })\n        );\n      }\n    }\n  }\n\n  previousStep() {\n    if (this.currentStepIndex > 0) {\n      this.currentStepIndex--;\n      this.updateStepStates();\n      this.updateNavigationState();\n\n      // Save progress if enabled\n      if (this.form.getAttribute(\"data-form-memory\") !== \"false\") {\n        this.formMemory.saveProgress();\n      }\n    }\n  }\n\n  goToStep(stepIndex) {\n    if (stepIndex >= 0 && stepIndex < this.steps.length) {\n      // Validate all steps before the target step\n      let canProceed = true;\n      for (let i = 0; i < stepIndex; i++) {\n        if (!this.validator.validateStep(this.steps[i])) {\n          canProceed = false;\n          this.currentStepIndex = i;\n          break;\n        }\n      }\n\n      if (canProceed) {\n        this.currentStepIndex = stepIndex;\n      }\n\n      this.updateStepStates();\n      this.updateNavigationState();\n    }\n  }\n\n  handleSubmit(event) {\n    // Validate all steps before submission\n    if (\n      this.currentStepIndex !== this.steps.length - 1 ||\n      !this.validator.validateAllSteps()\n    ) {\n      event.preventDefault();\n      alert(\"Please complete all required fields correctly before submitting.\");\n      return;\n    }\n\n    // Clear saved progress if form memory is enabled\n    if (this.form.getAttribute(\"data-form-memory\") !== \"false\") {\n      this.formMemory.clearSavedProgress();\n    }\n\n    // Dispatch form valid event\n    this.form.dispatchEvent(new CustomEvent(\"formValid\"));\n  }\n\n  resetForm() {\n    this.form.reset();\n    this.validator.clearAllErrors();\n    if (this.form.getAttribute(\"data-form-memory\") !== \"false\") {\n      this.formMemory.clearSavedProgress();\n    }\n    this.goToStep(0);\n  }\n\n  showSavedFeedback() {\n    let saveIndicator = this.form.querySelector(\".form-save-indicator\");\n    if (!saveIndicator) {\n      saveIndicator = document.createElement(\"div\");\n      saveIndicator.className = \"form-save-indicator\";\n      this.form.appendChild(saveIndicator);\n    }\n\n    saveIndicator.textContent = \"Progress saved\";\n    saveIndicator.style.opacity = \"1\";\n\n    setTimeout(() => {\n      saveIndicator.style.opacity = \"0\";\n    }, 2000);\n  }\n\n  destroy() {\n    // Cleanup form memory\n    if (this.form.getAttribute(\"data-form-memory\") !== \"false\") {\n      this.formMemory.destroy();\n    }\n\n    // Remove navigation listeners\n    this.nextButtons.forEach((button) => {\n      button.removeEventListener(\"click\", this.nextStep);\n    });\n\n    this.prevButtons.forEach((button) => {\n      button.removeEventListener(\"click\", this.previousStep);\n    });\n\n    // Remove form listeners\n    this.form.removeEventListener(\"submit\", this.handleSubmit);\n\n    // Clear any remaining error states\n    this.validator.clearAllErrors();\n  }\n}\n\nexport default WebflowMultiStepForm;\n","// // src/index.js\n// import WebflowMultiStepForm from \"./core/WebflowMultiStepForm.js\";\n\n// class MultiStepFormInitializer {\n//   static init() {\n//     // Find all forms with the multi-step attribute\n//     const forms = document.querySelectorAll(\"[data-multi-step-form]\");\n\n//     forms.forEach((form) => {\n//       // Ensure unique ID for form memory\n//       if (!form.id) {\n//         form.id = `msf-${Math.random().toString(36).substr(2, 9)}`;\n//       }\n\n//       // Initialize the form\n//       const multiStepForm = new WebflowMultiStepForm(form);\n\n//       // Store instance in form element for potential external access\n//       form._multiStepForm = multiStepForm;\n//     });\n//   }\n// }\n\n// // Auto-initialize when DOM is ready\n// if (document.readyState === \"loading\") {\n//   document.addEventListener(\"DOMContentLoaded\", () =>\n//     MultiStepFormInitializer.init()\n//   );\n// } else {\n//   MultiStepFormInitializer.init();\n// }\n\n// // Expose to global scope for manual initialization if needed\n// window.WebflowMultiStepForm = {\n//   init: MultiStepFormInitializer.init,\n//   create: (form) => new WebflowMultiStepForm(form),\n// };\n\nimport WebflowMultiStepForm from \"./WebflowMultiStepForm.js\";\n\nclass MultiStepFormInitializer {\n  static init() {\n    // Find all forms with the multi-step attribute\n    const forms = document.querySelectorAll(\"[data-multi-step-form]\");\n\n    forms.forEach((form) => {\n      // Ensure unique ID for form memory\n      if (!form.id) {\n        form.id = `msf-${Math.random().toString(36).substr(2, 9)}`;\n      }\n\n      // Initialize the form\n      const multiStepForm = new WebflowMultiStepForm(form);\n\n      // Store instance in form element for potential external access\n      form._multiStepForm = multiStepForm;\n    });\n  }\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", () =>\n    MultiStepFormInitializer.init()\n  );\n} else {\n  MultiStepFormInitializer.init();\n}\n\n// Export the class and expose global scope\nexport default MultiStepFormInitializer;\nexport { WebflowMultiStepForm };\nwindow.WebflowMultiStepForm = {\n  init: MultiStepFormInitializer.init,\n  create: (form) => new WebflowMultiStepForm(form),\n};\n"],"names":["StepManager","constructor","form","this","steps","Array","from","querySelectorAll","currentStepIndex","totalSteps","length","getCurrentStep","getCurrentStepIndex","getTotalSteps","goToStep","index","updateStepStates","next","previous","hasNext","hasPrevious","forEach","step","removeAttribute","setAttribute","style","display","dispatchEvent","CustomEvent","detail","currentStep","isFirstStep","isLastStep","FormMemory","formId","id","storageKey","autoSaveInterval","handleInput","bind","saveProgress","restoreProgress","init","addEventListener","setInterval","window","event","target","type","saveTimeout","clearTimeout","setTimeout","formData","field","checked","name","value","localStorage","setItem","JSON","stringify","timestamp","Date","now","data","getAttribute","error","console","warn","saved","getItem","parse","MAX_AGE","clearSavedProgress","Object","entries","parseInt","removeItem","destroy","clearInterval","removeEventListener","QueryParams","hasAttribute","prefillFromQueryParams","stepParam","getQueryParam","param","URLSearchParams","location","search","get","paramName","paramValue","toLowerCase","Event","bubbles","Validator","validationRules","Map","customValidators","setupDefaultValidators","set","valid","trim","message","test","pattern","RegExp","setupFieldValidations","setupValidationListeners","rules","split","has","validateField","clearError","isValid","errorMessage","ruleString","ruleName","ruleValue","includes","validator","result","showError","validateStep","stepElement","fields","isStepValid","validateAllSteps","errorElement","parentElement","querySelector","document","createElement","className","appendChild","textContent","remove","clearAllErrors","addValidator","validatorFn","WebflowMultiStepForm","formElement","Element","Error","stepManager","formMemory","queryParams","nextButtons","prevButtons","button","e","preventDefault","nextStep","previousStep","updateNavigationState","handleSubmit","setupEventListeners","setupKeyboardNavigation","showSavedFeedback","key","shiftKey","firstInput","focus","scrollIntoView","behavior","block","disabled","stepIndex","canProceed","i","alert","resetForm","reset","saveIndicator","opacity","MultiStepFormInitializer","Math","random","toString","substr","multiStepForm","_multiStepForm","readyState","create"],"mappings":"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"}